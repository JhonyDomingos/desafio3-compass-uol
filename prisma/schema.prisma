// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  SUPER_ADMIN
}

model User {
  id             String       @id @default(uuid())
  name           String    @db.VarChar(120)
  email          String    @unique @db.VarChar(70)
  password       String    @db.VarChar(120)
  role           Role      @default(CUSTOMER)
  acceptedPolicy Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}

model Product {
  id            String          @id @default(uuid())
  name          String          @db.VarChar(120)
  description   String          @db.Text
  isNew         Boolean         @default(false)
  hasDiscount   Boolean         @default(false)
  price         Float           @db.DoublePrecision()
  discountedPrice Float?        @db.DoublePrecision()  // Preço com desconto, opcional
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt

  // Relacionamentos
  details       ProductDetail[] 
  skus          SKU[]
  categories    ProductCategory[]
  tags          ProductTag[]
}

model ProductDetail {
  id             Int      @id @default(autoincrement())
  size           String   @db.VarChar(50)
  color          String   @db.VarChar(120)
  price          Float    @db.DoublePrecision()
  discountedPrice Float?   @db.DoublePrecision()  // Preço com desconto, opcional
  productId      String   @db.VarChar(36)
  
  // Relacionamento com o produto
  product        Product  @relation(fields: [productId], references: [id])

  // Relacionamento com imagens
  images         ProductImage[]
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  url         String   @db.VarChar(120)
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  detailId    Int

  // Relacionamento com a variação do produto
  productDetail  ProductDetail  @relation(fields: [detailId], references: [id])
}

model SKU {
  id          Int      @id @default(autoincrement())
  skuCode     String   @db.VarChar(120)
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  productId   String   @db.VarChar(36)
  quantity    Int

  // Relacionamento com o produto
  product     Product  @relation(fields: [productId], references: [id])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(120)
  products    ProductCategory[]  // Relacionamento muitos-para-muitos com Product
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(120)
  products    ProductTag[]  // Relacionamento muitos-para-muitos com Product
}

model ProductCategory {
  productId   String
  categoryId  Int
  product     Product  @relation(fields: [productId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model ProductTag {
  productId   String
  tagxtId     Int
  product     Product  @relation(fields: [productId], references: [id])
  tag         Tag      @relation(fields: [tagxtId], references: [id])

  @@id([productId, tagxtId])
}
